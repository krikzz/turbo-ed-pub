;
; File generated by cc65 v 2.13.3
;
	.fopt		compiler,"cc65 v 2.13.3"
	.setcpu		"HUC6280"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
	.macpack	longbranch
	.export		_sysInit
	.export		_sysJoyRead
	.export		_sysJoyWait
	.export		_sysMemSet
	.export		_sysMemCopy
	.export		_sysSetBank
	.export		_sysGetBank
	.export		_sysIrqON
	.export		_sysIrqOFF
	.export		_vdcToDefault
	.export		_gVsync
	.export		_gSetColor
	.export		_gSetPal
	.export		_gSetXY
	.export		_gSetX
	.export		_gSetY
	.export		_gGetX
	.export		_gGetY
	.export		_gCleanScreen
	.export		_gAppendChar
	.export		_gAppendString
	.export		_gAppendString_ML
	.export		_gFillRect
	.export		_gFillRow
	.export		_gFillCol
	.export		_gAppendHex8
	.export		_gAppendHex16
	.export		_gAppendHex32
	.export		_gAppendNum
	.export		_gConsPrint
	.export		_gConsPrint_ML
	.export		_gConsPrintCX_ML
	.export		_gConsPrintCX
	.export		_gPrintHex
	.export		_gAppendHex
	.export		_sysMemToReg
	.export		_sysRegToMem
	.import		_sys_mem_to_reg_asm
	.import		_sys_reg_to_mem_asm
	.importzp	_zp_src
	.importzp	_zp_dst
	.importzp	_zp_len
	.export		_palette
	.import		_sys_set_bank
	.import		_g_clean_plan
	.export		_vdcSetReg
	.export		_vdcSetAddrWR
	.export		_gSetFont
	.import		_font
	.export		_g_pal
	.export		_g_addr
	.export		_sys_bank
	.export		_gAppendHex4

.segment	"DATA"

_palette:
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0124
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$01B1
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$01D2
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$00BA
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000

.segment	"RODATA"

_vdc_regs:
	.word	$0000
	.word	$0000
	.word	$0001
	.word	$0000
	.word	$0005
	.word	$0000
	.word	$0006
	.word	$0147
	.word	$0007
	.word	$0000
	.word	$0008
	.word	$0000
	.word	$0009
	.word	$0050
	.word	$000A
	.word	$0502
	.word	$000B
	.word	$0427
	.word	$000C
	.word	$1702
	.word	$000D
	.word	$00DF
	.word	$000E
	.word	$000C
	.word	$FFFF
L0001:
	.byte	$00

.segment	"BSS"

_g_pal:
	.res	2,$00
_g_addr:
	.res	2,$00
_sys_bank:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ sysInit (void)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_sysInit: near

.segment	"BNK00"

	jsr     decsp2
	lda     #$01
	sta     $0400
	ldx     #$00
	txa
	jsr     stax0sp
L007E:	jsr     ldax0sp
	jsr     aslax1
	clc
	adc     #<(_vdc_regs)
	tay
	txa
	adc     #>(_vdc_regs)
	tax
	tya
	jsr     ldaxi
	cpx     #$FF
	bne     L027A
	cmp     #$FF
	beq     L007F
L027A:	jsr     ldax0sp
	jsr     aslax1
	sta     ptr1
	txa
	clc
	adc     #>(_vdc_regs)
	sta     ptr1+1
	ldy     #<(_vdc_regs)
	lda     (ptr1),y
	jsr     pusha
	ldy     #$02
	jsr     ldaxysp
	ina
	bne     L008E
	inx
L008E:	jsr     aslax1
	clc
	adc     #<(_vdc_regs)
	tay
	txa
	adc     #>(_vdc_regs)
	tax
	tya
	jsr     pushw
	jsr     _vdcSetReg
	ldx     #$00
	lda     #$02
	jsr     addeq0sp
	bra     L007E
L007F:	ldx     #$01
	ina
	stz     $0402
	stx     $0402+1
	dex
	stz     $0404
	stz     $0404+1
	stz     $0402
	stz     $0402+1
L027C:	jsr     stax0sp
	ldy     #$01
	lda     (sp),y
	bne     L00A0
	lda     (sp)
	cmp     #$40
L00A0:	bcs     L0099
	jsr     ldax0sp
	jsr     aslax1
	clc
	adc     #<(_palette)
	tay
	txa
	adc     #>(_palette)
	tax
	tya
	jsr     ldaxi
	sta     $0404
	stx     $0404+1
	jsr     ldax0sp
	ina
	bne     L027C
	inx
	bra     L027C
L0099:	lda     #<(_font)
	ldx     #>(_font)
	jsr     pushax
	jsr     _gSetFont
	jsr     push0
	jsr     _gSetPal
	ldy     #$00
	jsr     _gCleanScreen
	lda     #$05
	sta     $0100
	lda     #$88
	sta     $0102
	stz     $0102+1
	lda     #$06
	sta     $1402
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ sysJoyRead (void)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_sysJoyRead: near

.segment	"BNK00"

	jsr     decsp1
	lda     #$01
	sta     $1000
	nop
	nop
	lda     #$03
	sta     $1000
	nop
	nop
	lda     #$01
	sta     $1000
	nop
	nop
	lda     $1000
	and     #$0F
	sta     (sp)
	stz     $1000
	nop
	nop
	lda     $1000
	ldx     #$00
	and     #$0F
	jsr     shlax4
	ora     (sp)
	sta     (sp)
	eor     #$FF
	sta     (sp)
	ldx     #$00
	lda     (sp)
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ sysJoyWait (void)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_sysJoyWait: near

.segment	"BNK00"

	lda     #$01
	jsr     pusha
L0107:	ldy     #$00
	lda     (sp)
	beq     L0108
	jsr     _gVsync
	jsr     _sysJoyRead
	sta     (sp)
	bra     L0107
L0108:	lda     (sp)
	bne     L010E
	jsr     _gVsync
	jsr     _sysJoyRead
	ldy     #$00
	sta     (sp)
	bra     L0108
L010E:	ldx     #$00
	lda     (sp)
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ sysMemSet (__near__ void*, unsigned char, unsigned short)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_sysMemSet: near

.segment	"BNK00"

	ldy     #$06
	jsr     pushwysp
L0116:	ldy     #$03
	jsr     ldaxysp
	sta     regsave
	stx     regsave+1
	jsr     decax1
	ldy     #$02
	jsr     staxysp
	lda     regsave
	ora     regsave+1
	jeq     incsp7
	jsr     ldax0sp
	sta     regsave
	stx     regsave+1
	ina
	bne     L011A
	inx
L011A:	jsr     stax0sp
	ldy     #$04
	lda     (sp),y
	sta     (regsave)
	bra     L0116

.endproc

; ---------------------------------------------------------------
; void __near__ sysMemCopy (__near__ void*, __near__ void*, unsigned short)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_sysMemCopy: near

.segment	"BNK00"

	ldy     #$07
	jsr     pushwysp
	ldy     #$07
	jsr     pushwysp
L011F:	ldy     #$05
	jsr     ldaxysp
	sta     regsave
	stx     regsave+1
	jsr     decax1
	ldy     #$04
	jsr     staxysp
	lda     regsave
	ora     regsave+1
	beq     L0120
	jsr     ldax0sp
	sta     regsave
	stx     regsave+1
	ina
	bne     L0123
	inx
L0123:	jsr     stax0sp
	lda     regsave
	ldx     regsave+1
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	sta     regsave
	stx     regsave+1
	ina
	bne     L0125
	inx
L0125:	ldy     #$04
	jsr     staxysp
	ldy     #$00
	lda     (regsave)
	jsr     staspidx
	bra     L011F
L0120:	ldy     #$0A
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ sysSetBank (unsigned char)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_sysSetBank: near

.segment	"BNK00"

	ldy     #$00
	lda     (sp)
	sta     _sys_bank
	jsr     _sys_set_bank
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ sysGetBank (void)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_sysGetBank: near

.segment	"BNK00"

	ldx     #$00
	lda     _sys_bank
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ sysIrqON (void)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_sysIrqON: near

.segment	"BNK00"

	cli
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ sysIrqOFF (void)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_sysIrqOFF: near

.segment	"BNK00"

	sei
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ vdcToDefault (void)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_vdcToDefault: near

.segment	"BNK00"

	jsr     decsp1
	lda     #$00
	tay
L027D:	sta     (sp),y
	cmp     #$0F
	bcs     L00C8
	lda     (sp),y
	cmp     #$0D
	beq     L00C9
	lda     (sp),y
	sta     $0100
	stz     $0102
	stz     $0102+1
L00C9:	lda     (sp),y
	ina
	bra     L027D
L00C8:	lda     #$0D
	sta     $0100
	stz     $0102
	stz     $0102+1
	stz     $0102
	stz     $0102+1
	lda     $0100
	sta     (sp),y
	stz     $0400
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ gVsync (void)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_gVsync: near

.segment	"BNK00"

L0131:	lda     $0100
	and     #$20
	bne     L0131
L0132:	lda     $0100
	and     #$20
	beq     L0132
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ gSetColor (unsigned short, unsigned short)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_gSetColor: near

.segment	"BNK00"

	ldy     #$03
	jsr     ldaxysp
	sta     $0402
	stx     $0402+1
	jsr     ldax0sp
	sta     $0404
	stx     $0404+1
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ gSetPal (unsigned short)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_gSetPal: near

.segment	"BNK00"

	ldx     #$01
	lda     #$00
	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	txa
	and     #$F0
	tax
	lda     #$00
	jsr     tosorax
	sta     _g_pal
	stx     _g_pal+1
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ gSetXY (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_gSetXY: near

.segment	"BNK00"

	ldx     #$00
	lda     (sp)
	jsr     shlax4
	jsr     shlax2
	clc
	ldy     #$01
	adc     (sp),y
	bcc     L027E
	inx
L027E:	sta     _g_addr
	stx     _g_addr+1
	jsr     pushax
	jsr     _vdcSetAddrWR
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ gSetX (unsigned char)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_gSetX: near

.segment	"BNK00"

	ldy     #$00
	jsr     _gGetY
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	jsr     _gSetXY
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ gSetY (unsigned char)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_gSetY: near

.segment	"BNK00"

	ldy     #$00
	jsr     _gGetX
	jsr     pusha
	lda     (sp)
	jsr     pusha
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	jsr     _gSetXY
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ gGetX (void)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_gGetX: near

.segment	"BNK00"

	lda     _g_addr
	ldx     #$00
	and     #$3F
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ gGetY (void)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_gGetY: near

.segment	"BNK00"

	lda     _g_addr
	ldx     _g_addr+1
	jsr     shrax4
	jmp     shrax2

.endproc

; ---------------------------------------------------------------
; void __near__ gCleanScreen (void)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_gCleanScreen: near

.segment	"BNK00"

	jsr     push0
	jsr     _vdcSetAddrWR
	ldy     #$00
	jsr     _g_clean_plan
	jsr     push0
	jsr     _gSetPal
	lda     #$00
	jsr     pusha
	jsr     pusha
	jmp     _gSetXY

.endproc

; ---------------------------------------------------------------
; void __near__ gAppendChar (unsigned char)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_gAppendChar: near

.segment	"BNK00"

	lda     #$02
	sta     $0100
	lda     (sp)
	clc
	adc     _g_pal
	ldx     _g_pal+1
	bcc     L027F
	inx
L027F:	sta     $0102
	stx     $0102+1
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ gAppendString (__near__ unsigned char*)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_gAppendString: near

.segment	"BNK00"

	lda     #$02
	sta     $0100
L0170:	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	jeq     incsp2
	lda     _g_pal
	ldx     _g_pal+1
	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	sta     regsave
	stx     regsave+1
	ina
	bne     L0176
	inx
L0176:	ldy     #$02
	jsr     staxysp
	lda     (regsave)
	jsr     tosadda0
	sta     $0102
	stx     $0102+1
	bra     L0170

.endproc

; ---------------------------------------------------------------
; void __near__ gAppendString_ML (__near__ unsigned char*, unsigned char)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_gAppendString_ML: near

.segment	"BNK00"

	lda     #$02
	sta     $0100
L017B:	ldy     #$02
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	jeq     incsp3
	lda     (sp)
	pha
	dea
	sta     (sp)
	pla
	tax
	jeq     incsp3
	lda     _g_pal
	ldx     _g_pal+1
	jsr     pushax
	ldy     #$04
	jsr     ldaxysp
	sta     regsave
	stx     regsave+1
	ina
	bne     L0183
	inx
L0183:	ldy     #$03
	jsr     staxysp
	lda     (regsave)
	jsr     tosadda0
	sta     $0102
	stx     $0102+1
	bra     L017B

.endproc

; ---------------------------------------------------------------
; void __near__ gFillRect (unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_gFillRect: near

.segment	"BNK00"

	jsr     decsp6
	ldy     #$0A
	lda     (sp),y
	clc
	adc     _g_pal
	ldx     _g_pal+1
	bcc     L0280
	inx
L0280:	jsr     pushax
	ldy     #$0B
	lda     (sp),y
	jsr     pusha
	ldy     #$0B
	lda     (sp),y
	jsr     pusha
	jsr     _gSetXY
	lda     _g_addr
	ldx     _g_addr+1
	ldy     #$04
	jsr     staxysp
	ldy     #$06
	jsr     staxysp
L018C:	ldy     #$08
	lda     (sp),y
	pha
	dea
	sta     (sp),y
	pla
	tax
	beq     L018D
	iny
	lda     (sp),y
	ldx     #$00
	ldy     #$02
	jsr     staxysp
	ldy     #$09
	jsr     pushwysp
	jsr     _vdcSetAddrWR
L0193:	ldy     #$03
	jsr     ldaxysp
	sta     regsave
	stx     regsave+1
	jsr     decax1
	ldy     #$02
	jsr     staxysp
	lda     regsave
	ora     regsave+1
	beq     L0194
	jsr     ldax0sp
	sta     $0102
	stx     $0102+1
	bra     L0193
L0194:	ldy     #$06
	tax
	lda     #$40
	jsr     addeqysp
	bra     L018C
L018D:	dey
	jsr     pushwysp
	jsr     _vdcSetAddrWR
	ldy     #$0D
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ gFillRow (unsigned char, unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_gFillRow: near

.segment	"BNK00"

	ldy     #$03
	lda     (sp),y
	clc
	adc     _g_pal
	pha
	lda     #$00
	adc     _g_pal+1
	tax
	pla
	jsr     pushax
	ldy     #$04
	lda     (sp),y
	jsr     pusha
	ldy     #$04
	lda     (sp),y
	jsr     pusha
	jsr     _gSetXY
L01A2:	ldy     #$02
	lda     (sp),y
	pha
	dea
	sta     (sp),y
	pla
	tax
	jeq     incsp6
	jsr     ldax0sp
	sta     $0102
	stx     $0102+1
	bra     L01A2

.endproc

; ---------------------------------------------------------------
; void __near__ gFillCol (unsigned char, unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_gFillCol: near

.segment	"BNK00"

	ldy     #$03
	lda     (sp),y
	clc
	adc     _g_pal
	pha
	lda     #$00
	adc     _g_pal+1
	tax
	pla
	jsr     pushax
	jsr     decsp2
	ldy     #$06
	lda     (sp),y
	jsr     pusha
	ldy     #$06
	lda     (sp),y
	jsr     pusha
	jsr     _gSetXY
	lda     _g_addr
	ldx     _g_addr+1
	jsr     stax0sp
L01AF:	ldy     #$04
	lda     (sp),y
	pha
	dea
	sta     (sp),y
	pla
	tax
	jeq     incsp8
	jsr     pushw0sp
	jsr     _vdcSetAddrWR
	ldy     #$03
	jsr     ldaxysp
	sta     $0102
	stx     $0102+1
	ldx     #$00
	lda     #$40
	jsr     addeq0sp
	bra     L01AF

.endproc

; ---------------------------------------------------------------
; void __near__ gAppendHex8 (unsigned char)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_gAppendHex8: near

.segment	"BNK00"

	ldx     #$00
	lda     (sp)
	jsr     asrax4
	jsr     pusha
	jsr     _gAppendHex4
	lda     (sp)
	and     #$0F
	jsr     pusha
	jsr     _gAppendHex4
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ gAppendHex16 (unsigned short)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_gAppendHex16: near

.segment	"BNK00"

	jsr     ldax0sp
	txa
	jsr     pusha
	jsr     _gAppendHex8
	lda     (sp)
	jsr     pusha
	jsr     _gAppendHex8
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ gAppendHex32 (unsigned long)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_gAppendHex32: near

.segment	"BNK00"

	jsr     ldeax0sp
	ldx     sreg+1
	lda     sreg
	jsr     pushax
	jsr     _gAppendHex16
	jsr     ldeax0sp
	jsr     pusheax
	ldx     #$FF
	txa
	jsr     tosand0ax
	jsr     pushax
	jsr     _gAppendHex16
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ gAppendNum (unsigned long)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_gAppendNum: near

.segment	"BNK00"

	ldy     #$0D
	jsr     subysp
	lda     #$0A
	jsr     leaa0sp
	jsr     pushax
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	sta     (ptr1)
	ldy     #$12
	jsr     ldeaxysp
	jsr     pusheax
	ldx     #$00
	stz     sreg
	stz     sreg+1
	txa
	jsr     toseqeax
	beq     L01D8
	ldx     #$00
	lda     #$01
	jsr     subeq0sp
	sta     ptr1
	stx     ptr1+1
	lda     #$30
	sta     (ptr1)
L01D8:	ldx     #$00
	txa
L0282:	ldy     #$0D
	jsr     staxysp
	ldy     #$12
	jsr     ldeaxysp
	jsr     pusheax
	ldx     #$00
	stz     sreg
	stz     sreg+1
	txa
	jsr     tosneeax
	beq     L01DD
	ldx     #$00
	lda     #$01
	jsr     subeq0sp
	jsr     pushax
	ldy     #$14
	jsr     ldeaxysp
	jsr     pusheax
	ldx     #$00
	lda     #$0A
	jsr     tosumod0ax
	ldy     #$30
	jsr     inceaxy
	ldy     #$00
	jsr     staspidx
	ldy     #$12
	jsr     ldeaxysp
	jsr     pusheax
	ldx     #$00
	lda     #$0A
	jsr     tosudiv0ax
	ldy     #$0F
	jsr     steaxysp
	ldy     #$0E
	jsr     ldaxysp
	sta     regsave
	stx     regsave+1
	ina
	bne     L0282
	inx
	bra     L0282
L01DD:	jsr     pushw0sp
	jsr     _gAppendString
	ldy     #$13
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ gConsPrint (__near__ unsigned char*)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_gConsPrint: near

.segment	"BNK00"

	lda     #$40
	clc
	adc     _g_addr
	sta     _g_addr
	bcc     L01EE
	inc     _g_addr+1
L01EE:	lda     _g_addr
	ldx     _g_addr+1
	jsr     pushax
	jsr     _vdcSetAddrWR
	jsr     pushw0sp
	jsr     _gAppendString
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ gConsPrint_ML (__near__ unsigned char*, unsigned char)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_gConsPrint_ML: near

.segment	"BNK00"

	lda     #$40
	clc
	adc     _g_addr
	sta     _g_addr
	bcc     L01F6
	inc     _g_addr+1
L01F6:	lda     _g_addr
	ldx     _g_addr+1
	jsr     pushax
	jsr     _vdcSetAddrWR
	ldy     #$04
	jsr     pushwysp
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	jsr     _gAppendString_ML
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ gConsPrintCX_ML (__near__ unsigned char*, unsigned char)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_gConsPrintCX_ML: near

.segment	"BNK00"

	lda     #$00
	jsr     pusha
L0202:	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (sp)
	tay
	lda     (ptr1),y
	beq     L0203
	lda     (sp)
	ina
	sta     (sp)
	bra     L0202
L0203:	tax
	lda     (sp)
	sec
	ldy     #$01
	sbc     (sp),y
	bcc     L0207
	beq     L0207
	lda     (sp),y
	sta     (sp)
L0207:	lda     #$28
	sec
	sbc     (sp)
	jsr     shrax1
	jsr     pusha
	jsr     _gSetX
	ldy     #$05
	jsr     pushwysp
	ldy     #$03
	lda     (sp),y
	jsr     pusha
	jsr     _gConsPrint_ML
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ gConsPrintCX (__near__ unsigned char*)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_gConsPrintCX: near

.segment	"BNK00"

	jsr     pushw0sp
	lda     #$26
	jsr     pusha
	jsr     _gConsPrintCX_ML
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ gPrintHex (__near__ void*, unsigned short)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_gPrintHex: near

.segment	"BNK00"

	ldy     #$05
	jsr     pushwysp
	jsr     decsp2
	ldx     #$00
	txa
L0286:	jsr     stax0sp
	ldy     #$04
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bcs     L0244
	lda     (sp)
	and     #$0F
	bne     L024C
	lda     #<(L0001)
	ldx     #>(L0001)
	jsr     pushax
	jsr     _gConsPrint
L024C:	lda     (sp)
	and     #$0F
	cmp     #$08
	bne     L0251
	lda     #$2E
	jsr     pusha
	jsr     _gAppendChar
L0251:	lda     (sp)
	and     #$01
	bne     L0256
	ldx     #$10
	bra     L0284
L0256:	ldx     #$00
	txa
L0284:	jsr     pushax
	jsr     _gSetPal
	ldy     #$03
	jsr     ldaxysp
	sta     regsave
	stx     regsave+1
	ina
	bne     L0261
	inx
L0261:	ldy     #$02
	jsr     staxysp
	lda     (regsave)
	jsr     pusha
	jsr     _gAppendHex8
	jsr     ldax0sp
	ina
	bne     L0286
	inx
	bra     L0286
L0244:	jsr     push0
	jsr     _gSetPal
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; void __near__ gAppendHex (__near__ void*, unsigned short)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_gAppendHex: near

.segment	"BNK00"

	ldy     #$05
	jsr     pushwysp
	jsr     decsp2
	ldx     #$00
	txa
L0288:	jsr     stax0sp
	ldy     #$04
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	jcs     incsp8
	ldy     #$03
	jsr     ldaxysp
	sta     regsave
	stx     regsave+1
	ina
	bne     L0240
	inx
L0240:	ldy     #$02
	jsr     staxysp
	lda     (regsave)
	jsr     pusha
	jsr     _gAppendHex8
	jsr     ldax0sp
	ina
	bne     L0288
	inx
	bra     L0288

.endproc

; ---------------------------------------------------------------
; void __near__ sysMemToReg (__near__ void*, __near__ void*, unsigned short)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_sysMemToReg: near

.segment	"BNK00"

	lda     (sp)
	ldy     #$01
	ora     (sp),y
	jeq     incsp6
	ldy     #$05
	jsr     ldaxysp
	sta     _zp_src
	stx     _zp_src+1
	ldy     #$03
	jsr     ldaxysp
	sta     _zp_dst
	stx     _zp_dst+1
	jsr     ldax0sp
	sta     _zp_len
	stx     _zp_len+1
	ldy     #$00
	jsr     _sys_mem_to_reg_asm
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ sysRegToMem (__near__ void*, __near__ void*, unsigned short)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_sysRegToMem: near

.segment	"BNK00"

	lda     (sp)
	ldy     #$01
	ora     (sp),y
	jeq     incsp6
	ldy     #$05
	jsr     ldaxysp
	sta     _zp_src
	stx     _zp_src+1
	ldy     #$03
	jsr     ldaxysp
	sta     _zp_dst
	stx     _zp_dst+1
	jsr     ldax0sp
	sta     _zp_len
	stx     _zp_len+1
	ldy     #$00
	jsr     _sys_reg_to_mem_asm
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ vdcSetReg (unsigned char, unsigned short)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_vdcSetReg: near

.segment	"BNK00"

	ldy     #$02
	lda     (sp),y
	sta     $0100
	jsr     ldax0sp
	sta     $0102
	stx     $0102+1
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ vdcSetAddrWR (unsigned short)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_vdcSetAddrWR: near

.segment	"BNK00"

	stz     $0100
	jsr     ldax0sp
	sta     $0102
	stx     $0102+1
	lda     #$02
	sta     $0100
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ gSetFont (__near__ unsigned char*)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_gSetFont: near

.segment	"BNK00"

	jsr     decsp2
	ldx     #$12
	lda     #$00
	jsr     pushax
	jsr     _vdcSetAddrWR
	lda     #$00
	ldy     #$01
L028B:	sta     (sp),y
	cmp     #$80
	jcs     incsp4
	lda     #$00
	dey
L0289:	sta     (sp)
	cmp     #$08
	bcs     L021D
	ldy     #$03
	jsr     ldaxysp
	sta     regsave
	stx     regsave+1
	ina
	bne     L0227
	inx
L0227:	ldy     #$02
	jsr     staxysp
	ldy     #$00
	lda     (regsave)
	sta     $0102
	stz     $0102+1
	lda     (sp)
	ina
	bra     L0289
L021D:	tya
L028A:	sta     (sp),y
	cmp     #$08
	bcs     L0216
	lda     #$FF
	sta     $0102
	stz     $0102+1
	lda     (sp),y
	ina
	bra     L028A
L0216:	ldy     #$01
	lda     (sp),y
	ina
	bra     L028B

.endproc

; ---------------------------------------------------------------
; void __near__ gAppendHex4 (unsigned char)
; ---------------------------------------------------------------

.segment	"BNK00"

.proc	_gAppendHex4: near

.segment	"BNK00"

	lda     (sp)
	cmp     #$0A
	bcs     L01BD
	lda     #$30
	bra     L01BF
L01BD:	lda     #$37
L01BF:	clc
	adc     (sp)
	sta     (sp)
	jsr     pusha
	jsr     _gAppendChar
	jmp     incsp1

.endproc


MEMORY {
    ZP:      start = $0028,  size = $d8,   type = rw, define = yes;
    BNK00:   start = $E000,  size = $1FF0, file = %O, fill = yes;
    VECTORS: start = $fff0,  size = $10,   file = %O, fill = yes;
    PRG:     start = $6000,  size = $8000, file = %O ,fill = yes, define = yes;
    BNK01:   start = $4000,  size = $2000, file = %O, fill = yes;
    BNK02:   start = $4000,  size = $2000, file = %O, fill = yes;
    BNK03:   start = $4000,  size = $2000, file = %O, fill = yes;
    BNK04:   start = $4000,  size = $2000, file = %O, fill = yes;
    BNK05:   start = $4000,  size = $2000, file = %O, fill = yes;
    BNK06:   start = $4000,  size = $2000, file = %O, fill = yes;
    BNK07:   start = $4000,  size = $2000, file = %O, fill = yes;
    BNK08:   start = $4000,  size = $2000, file = %O, fill = yes;
    BNK09:   start = $4000,  size = $2000, file = %O, fill = yes;
    BNK10:   start = $4000,  size = $2000, file = %O, fill = yes;
    BNK11:   start = $4000,  size = $2000, file = %O, fill = yes;
    RAM:     start = $2200,  size = $1E00, define = yes;
}

SEGMENTS {
    BNK00:    load = BNK00,          type = ro;
    VECTORS:  load = VECTORS,        type = ro;
    LOWCODE:  load = PRG,            type = ro,                optional = yes;
    INIT:     load = PRG,            type = ro,  define = yes, optional = yes;
    CODE:     load = PRG,            type = ro,  define = yes;
    RODATA:   load = PRG,            type = ro,  define = yes;
    DATA:     load = PRG, run = RAM, type = rw,  define = yes;
    BNK01:    load = BNK01,          type = ro,                optional = yes;
    BNK02:    load = BNK02,          type = ro,                optional = yes;
    BNK03:    load = BNK03,          type = ro,                optional = yes;
    BNK04:    load = BNK04,          type = ro,                optional = yes;
    BNK05:    load = BNK05,          type = ro,                optional = yes;
    BNK06:    load = BNK06,          type = ro,                optional = yes;
    BNK07:    load = BNK07,          type = ro,                optional = yes;
    BNK08:    load = BNK08,          type = ro,                optional = yes;
    BNK09:    load = BNK09,          type = ro,                optional = yes;
    BNK10:    load = BNK10,          type = ro,                optional = yes;
    BNK11:    load = BNK11,          type = ro,                optional = yes;

    BSS:      load = RAM,            type = bss, define = yes;
    HEAP:     load = RAM,            type = bss, optional = yes;
    ZEROPAGE: load = ZP,             type = zp;
}

FEATURES {
    CONDES: segment = INIT,
	    type = constructor,
	    label = __CONSTRUCTOR_TABLE__,
	    count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
	    type = destructor,
	    label = __DESTRUCTOR_TABLE__,
	    count = __DESTRUCTOR_COUNT__;
    CONDES: type = interruptor,
	    segment = RODATA,
	    label = __INTERRUPTOR_TABLE__,
	    count = __INTERRUPTOR_COUNT__;
}

SYMBOLS {
    __STACKSIZE__ = $0500;  	# 5 pages stack
}